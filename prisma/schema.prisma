// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
  Like          Like[]
  View          View[]
  TradingPair   TradingPair[]
  Following     Following[]
  Channel       Channel[]
  Follower      Follower[]
  Goal          Goal[]
  Trade         Trade[]
  Host          Host[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// post model
model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  slug       String     @unique
  content    String
  published  Boolean    @default(false)
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  categories Category[]
  comments   Comment[]
  likes      Like[]
  views      View[]
  channel    Channel?   @relation(fields: [channelId], references: [id])
  channelId  String
}

// category model
model Category {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  slug        String   @unique
  description String?
  posts       Post[]
}

// comment model
model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

// like model
model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

// view model
model View {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
}

// list of trading pairs for a user
model TradingPair {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  slug      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// following list for a user
model Following {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  userEmail      String   @unique
  followingName  String
  followingId    String
  followingImage String
  followingIntro String
}

// follower list for a user
model Follower {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  userEmail     String   @unique
  followerName  String
  followerId    String
  followerImage String
  followerIntro String
}

// channel that contains multiple users and posts and comments
model Channel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  slug      String   @unique
  users     User     @relation(fields: [userId], references: [id])
  posts     Post[]
  userId    String
  postId    String
  Host      Host[]
}

// host of a channel
model Host {
  id        String  @id @default(cuid())
  users     User    @relation(fields: [userId], references: [id])
  channels  Channel @relation(fields: [channelId], references: [id])
  userId    String
  channelId String
}

// Monthly and Weekly goals for a user
model Goal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  goalType  String
  goal      String
}

// Trade Records of a user
model Trade {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  slug      String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  winloss   String
  roi       Int
}

// define user types
enum Role {
  ADMIN
  MEMBER
  GUEST
}
